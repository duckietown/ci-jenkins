ARG ARCH=arm64v8

FROM ${ARCH}/openjdk:11-jdk-slim-buster

ARG user=jenkins
ARG group=jenkins
ARG uid=1000
ARG gid=1000
ARG http_port=8080
ARG agent_port=50000
ARG JENKINS_HOME=/var/jenkins_home
ARG REF=/usr/share/jenkins/ref

ARG ARCH
ARG DOCKER_ARCH=aarch64

ENV JENKINS_HOME $JENKINS_HOME
ENV JENKINS_SLAVE_AGENT_PORT ${agent_port}
ENV REF $REF

ENV JENKINS_HOME $JENKINS_HOME
ENV JENKINS_SLAVE_AGENT_PORT ${agent_port}
ENV REF $REF

ENV DEBIAN_FRONTEND=noninteractive

ARG DOCKER_DOWNLOAD_URL="https://download.docker.com/linux/static/stable"
ARG DOCKER_VERSION="18.06.0-ce"

# Add QEMU support
COPY ./assets/qemu/${ARCH}/ /usr/bin/

# Upgrade env
RUN apt update \
  && apt-get upgrade -y \
  && rm -rf /var/lib/apt/lists/*

# Install dependencies
RUN apt update \
  && apt install -y --no-install-recommends\
    wget \
    sudo \
    git \
    curl \
    gpg \
    gpg-agent \
    unzip \
    libfreetype6 \
    libfontconfig1 \
  # dependencies needed to run dt-shell
    python3 \
    python3-pip \
    python3-setuptools \
    python3-wheel \
    python3-dev \
    build-essential \
  && rm -rf /var/lib/apt/lists/*

# Jenkins is run with user `jenkins`, uid = 1000
# If you bind mount a volume from the host or a data container,
# ensure you use the same uid
RUN mkdir -p $JENKINS_HOME \
  && chown ${uid}:${gid} $JENKINS_HOME \
  && groupadd -g ${gid} ${group} \
  && useradd -d "$JENKINS_HOME" -u ${uid} -g ${gid} -m -s /bin/bash ${user}

# Jenkins home directory is a volume, so configuration and build history
# can be persisted and survive image upgrades
VOLUME $JENKINS_HOME

# $REF (defaults to `/usr/share/jenkins/ref/`) contains all reference configuration we want
# to set on a fresh new installation. Use it to bundle additional plugins
# or config file with your custom jenkins Docker image.
RUN mkdir -p ${REF}/init.groovy.d

# Use tini as subreaper in Docker container to adopt zombie processes
ARG TINI_VERSION=v0.16.1
COPY assets/tini_pub.gpg ${JENKINS_HOME}/tini_pub.gpg
RUN curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$(dpkg --print-architecture) -o /sbin/tini \
  && curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$(dpkg --print-architecture).asc -o /sbin/tini.asc \
  && gpg --no-tty --import ${JENKINS_HOME}/tini_pub.gpg \
  && gpg --verify /sbin/tini.asc \
  && rm -rf /sbin/tini.asc /root/.gnupg \
  && chmod +x /sbin/tini

# jenkins version being bundled in this docker image
ARG JENKINS_VERSION
ENV JENKINS_VERSION ${JENKINS_VERSION:-2.219}

# jenkins.war checksum, download will be validated using it
ARG JENKINS_SHA=49757dcf796f7c8714d915eeaa22effcf50546e716b7d818183c304c30005b7e

# Can be used to customize where jenkins.war get downloaded from
ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war

# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum
# see https://github.com/docker/docker/issues/8331
RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \
  && echo "${JENKINS_SHA}  /usr/share/jenkins/jenkins.war" | sha256sum -c -

ENV JENKINS_UC https://updates.jenkins.io
ENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental
ENV JENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementals
RUN chown -R ${user} "$JENKINS_HOME" "$REF"

# for main web interface:
EXPOSE ${http_port}

# will be used by attached slave agents:
EXPOSE ${agent_port}

ENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log
ENV JENKINS_ENABLE_FUTURE_JAVA=true

USER ${user}

COPY assets/jenkins-support /usr/local/bin/jenkins-support
COPY assets/jenkins.sh /usr/local/bin/jenkins.sh
COPY assets/tini-shim.sh /bin/tini
ENTRYPOINT ["/sbin/tini", "--", "/usr/local/bin/jenkins.sh"]

# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup $REF/plugins from a support bundle
COPY assets/plugins.sh /usr/local/bin/plugins.sh
COPY assets/install-plugins.sh /usr/local/bin/install-plugins.sh



# === Jenkins DIND for Duckietown ====

USER root

# install docker binaries
RUN cd /tmp \
  # download binaries
  && wget \
    "${DOCKER_DOWNLOAD_URL}/${DOCKER_ARCH}/docker-${DOCKER_VERSION}.tgz" \
    -O ./docker-bin.tgz \
  # extract binaries
  && tar -zxvf ./docker-bin.tgz \
  # copy binaries to system dir
  && cp ./docker/* /usr/local/bin \
  # clean up temp files
  && rm -rf \
    docker \
    docker-bin.tgz

# give the jenkins user the power to create groups
RUN echo 'jenkins ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers.d/jenkins_no_password

# Install duckietown-shell
RUN pip3 install --upgrade duckietown-shell

# Configure PATH
ENV PATH=/var/jenkins_home/.local/bin/:${PATH}

# Switch back to jenkins user
USER ${user}

# copy entrypoint
COPY assets/entrypoint /entrypoint

ENTRYPOINT /entrypoint
